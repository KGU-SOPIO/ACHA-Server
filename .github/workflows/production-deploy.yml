name: Deploy to Production Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    environment: production
    permissions:
      id-token: write
      contents: write

    steps:
      - name: "레포지토리에서 체크아웃한다."
        uses: actions/checkout@v4

      - name: "auto_tagging 트리거를 동작한다"
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event_name != 'workflow_dispatch' }}

      - name: "릴리즈 태그를 생성한다."
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
        if: ${{ github.event_name != 'workflow_dispatch' }}

      - name: "JDK 23을 설정한다."
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: "Gradle 설정을 진행한다."
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true

      - name: "Gradle 빌드를 실행한다."
        run: ./gradlew clean build -x test

      - name: "도커에 로그인한다."
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "도커 허브에 빌드된 이미지를 푸시한다."
        run: |
          if [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            VERSION=${{ steps.tag_version.outputs.new_tag }}
            docker build -t ${{ secrets.DOCKER_USERNAME }}/acha-api:$VERSION .
            docker tag ${{ secrets.DOCKER_USERNAME }}/acha-api:$VERSION ${{ secrets.DOCKER_USERNAME }}/acha-api:latest
            docker push ${{ secrets.DOCKER_USERNAME }}/acha-api:$VERSION
          else
            docker build -t ${{ secrets.DOCKER_USERNAME }}/acha-api:latest .
          fi
            docker push ${{ secrets.DOCKER_USERNAME }}/acha-api:latest

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: "레포지토리에서 체크아웃한다."
        uses: actions/checkout@v4

      - name: "docker-compose.yml을 scp 전송한다."
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: infra/production/docker/docker-compose.yml
          target: ${{ secrets.DOCKER_COMPOSE_PATH }}
          strip_components: 3

      - name: "애플리케이션 서버를 구동한다."
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker-compose -f ${{ secrets.DOCKER_COMPOSE_PATH }}/docker-compose.yml pull
            docker-compose -f ${{ secrets.DOCKER_COMPOSE_PATH }}/docker-compose.yml --env-file ${{ secrets.ENV_FILE_PATH }} up -d
          

  check:
    needs: deploy
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: "애플리케이션 서버 정상 동작 여부를 점검한다."
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ secrets.HEALTH_CHECK_ENDPOINT }}
          max-attempts: 5
          retry-delay: 5s

      - name: "최근 3개 이미지를 제외한 도커 이미지를 삭제한다."
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | \
              grep '${{ secrets.DOCKER_USERNAME }}/acha-api' | \
              sort -r | \
              tail -n +4 | \
              awk '{print $2}' | \
              xargs -r docker rmi -f

      - name: "디스코드 알림 (성공)"
        if: success()
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          content: "✅ 배포 성공: production 애플리케이션 서버 정상 구동됨"

      - name: "디스코드 알림 (실패)"
        if: failure()
        uses: tsickert/discord-webhook@v7.0.0
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
          content: "❌ 배포 실패: production 애플리케이션 서버 점검 실패"
