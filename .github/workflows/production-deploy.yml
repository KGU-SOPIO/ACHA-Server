name: Deploy to Production Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: "도커 이미지를 빌드한다."
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: "레포지토리에서 체크아웃한다."
        uses: actions/checkout@v4

      - name: "브랜치에서 버전 정보를 추출한다."
        run: echo "##[set-output name=version;]$(echo '${{ github.event.head_commit.message }}' | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')"
        id: extract_version_name

      - name: "릴리즈 태그를 생성한다."
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version_name.outputs.version }}
          release_name: ${{ steps.extract_version_name.outputs.version }}

      - name: "JDK 23을 설정한다."
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: "Gradle 설정을 진행한다."
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true

      - name: "Gradle 빌드를 실행한다."
        run: ./gradlew clean build -x test

      - name: "도커에 로그인한다."
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "도커 허브에 빌드된 이미지를 푸시한다."
        run: |
          VERSION=${{ steps.extract_version_name.outputs.version }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/acha-api:$VERSION .
          docker tag ${{ secrets.DOCKER_USERNAME }}/acha-api:$VERSION ${{ secrets.DOCKER_USERNAME }}/acha-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/acha-api:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/acha-api:latest

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: "레포지토리에서 체크아웃한다."
        uses: actions/checkout@v4

      - name: "docker-compose.yml을 scp 전송한다."
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: infra/production/docker/docker-compose.yml
          target: ${{ secrets.DOCKER_COMPOSE_PATH }}
          strip_components: 3

      - name: "애플리케이션 서버를 구동한다."
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker-compose -f ${{ secrets.DOCKER_COMPOSE_PATH }}/docker-compose.yml pull
            docker-compose -f ${{ secrets.DOCKER_COMPOSE_PATH }}/docker-compose.yml --env-file ${{ secrets.ENV_FILE_PATH }} up -d
          

  check:
    needs: deploy
    runs-on: ubuntu-22.04
    environment: production

    steps:
      - name: "애플리케이션 서버 정상 동작 여부를 점검한다."
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ secrets.HEALTH_CHECK_ENDPOINT }}
          max-attempts: 3
          retry-delay: 1s

      - name: "현재 실행되고 있는 컨테이너를 제외한 도커 이미지를 삭제한다."
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ secrets.DOCKER_USERNAME }}/acha-api" | grep -v "$(docker ps --format "{{.Image}}")" | xargs -r docker rmi -f

      - name: "디스코드 알림 (성공)"
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ✅ 배포 성공 🎉  
            - 애플리케이션 정상 구동됨  
            - 환경: Production  
            - 버전: `${{ needs.build.outputs.version }}`  

      - name: "디스코드 알림 (실패)"
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ❌ 배포 실패 🚨  
            - 서버 점검 실패  
            - 환경: Production  
            - 조치 필요! 🛠
