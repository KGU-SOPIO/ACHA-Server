name: Deploy to Development Server

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    environment: production
    permissions:
      contents: write

    steps:
      - name: "레포지토리에서 체크아웃한다."
        uses: actions/checkout@v4

      - name: "JDK 23을 설정한다."
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: "Gradle 설정을 진행한다."
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: true

      - name: "Gradle 빌드를 실행한다."
        run: ./gradlew clean build -x test

      - name: "도커에 로그인한다."
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: "도커 허브에 빌드된 이미지를 푸시한다."
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/acha-api:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/acha-api:latest

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    environment: development

    steps:
      - name: "레포지토리에서 체크아웃한다."
        uses: actions/checkout@v4

      - name: "docker-compose.yml을 scp 전송한다."
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: infra/development/docker/docker-compose.yml
          target: ${{ secrets.DOCKER_COMPOSE_PATH }}
          strip_components: 3

      - name: "애플리케이션 서버를 구동한다."
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker-compose -f ${{ secrets.DOCKER_COMPOSE_PATH }}/docker-compose.yml pull
            docker-compose -f ${{ secrets.DOCKER_COMPOSE_PATH }}/docker-compose.yml --env-file ${{ secrets.ENV_FILE_PATH }} up -d

    check:
      needs: deploy
      runs-on: ubuntu-20.04
      environment: development

      steps:
        - name: "애플리케이션 서버 정상 동작 여부를 점검한다."
          uses: jtalk/url-health-check-action@v3
          with:
            url: ${{ secrets.HEALTH_CHECK_ENDPOINT }}
            max-attempts: 5
            retry-delay: 5s
